// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson18605acbDecodeGithubComWolanmSearchEngineTypes(in *jlexer.Lexer, out *FileInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "filename":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Filename = string(in.String())
			}
		case "content":
			if in.IsNull() {
				in.Skip()
				out.Content = nil
			} else {
				out.Content = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson18605acbEncodeGithubComWolanmSearchEngineTypes(out *jwriter.Writer, in FileInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"filename\":"
		out.RawString(prefix[1:])
		out.String(string(in.Filename))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Content)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FileInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson18605acbEncodeGithubComWolanmSearchEngineTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FileInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson18605acbEncodeGithubComWolanmSearchEngineTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FileInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson18605acbDecodeGithubComWolanmSearchEngineTypes(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FileInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson18605acbDecodeGithubComWolanmSearchEngineTypes(l, v)
}
func easyjson18605acbDecodeGithubComWolanmSearchEngineTypes1(in *jlexer.Lexer, out *Document) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "doc_id":
			if in.IsNull() {
				in.Skip()
			} else {
				out.DocId = int64(in.Int64())
			}
		case "title":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Title = string(in.String())
			}
		case "body":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Body = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson18605acbEncodeGithubComWolanmSearchEngineTypes1(out *jwriter.Writer, in Document) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"doc_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.DocId))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		out.String(string(in.Body))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Document) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson18605acbEncodeGithubComWolanmSearchEngineTypes1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Document) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson18605acbEncodeGithubComWolanmSearchEngineTypes1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Document) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson18605acbDecodeGithubComWolanmSearchEngineTypes1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Document) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson18605acbDecodeGithubComWolanmSearchEngineTypes1(l, v)
}
